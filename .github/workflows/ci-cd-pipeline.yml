name: CI/CD Pipeline for Flask App with Docker

on:
  push:
    branches:
      - staging
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Print Current Directory and Files
        run: |
          pwd
          ls -R  # Show full directory structure

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .  # Root directory
          file: ./Dockerfile  # Ensure this file exists
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/flask-app:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/flask-app:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ðŸš€ Starting Deployment on EC2"

            # Ensure Docker is installed and running
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker

            # Log in to Docker Hub
            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            # Stop and remove any existing container
            docker stop flask-app || true
            docker rm flask-app || true

            # Remove old images to free up space
            docker image prune -af || true

            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/flask-app:latest

            # Run a new container
            docker run -d --name flask-app -p 5000:5000 \
              -e ENV=production \
              --restart unless-stopped \
              ${{ secrets.DOCKER_HUB_USERNAME }}/flask-app:latest

            echo "âœ… Deployment successful!"
